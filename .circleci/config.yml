version: 2.1

commands:
  setup-environment-vars:
    description: "Setup environment variables."
    steps:
      - run:
          name: Export required environment variables.
          command: |
            #Example of interpolation within CircleCI
            #export INTERPOLATE_VAR=${A}${B}
            cat \<<EOF >> $BASH_ENV
            #Export any extra variables that require interpolation here OR vararibles that do not require encryption.
            #export EXAMPLE_VAR=INTERPOLATE_VAR
            #export NOT_SECECRET="nonsecret stuff"
            #If you need CircleCI to do other than apply your terraform code change the command here.
            export TERRAFORM_COMMAND="destroy"
            #Set the region you want to deploy to
            export TF_VAR_aws_region="us-east-1"
            EOF
  run-terraform:
    description: "Run Terraform commands."
    parameters:
      run_command:
        type: string
        default: "validate"
    steps:
      - run:
          name: Run Terraform commands.
          command: |
            . ${BASH_ENV}
            cd terraform
            terraform init -backend-config="bucket=${STATE_BUCKET}" -backend-config="key=${STATE_KEY}" -backend-config="region=${TF_VAR_aws_region}"
            terraform << parameters.run_command >>
jobs:

  terraform-plan-only:
    docker:
      - image: hashicorp/terraform:latest
    steps:
      - checkout
      - setup-environment-vars
      - run-terraform:
          run_command: validate
      - run-terraform:
          run_command: plan -input=false

  terraform-apply:
    docker:
      - image: hashicorp/terraform:latest
    steps:
      - checkout
      - setup-environment-vars
      - run-terraform:
          run_command: validate
      - run-terraform:
          run_command: plan -input=false
      - run-terraform:
          run_command: ${TERRAFORM_COMMAND} -input=false -auto-approve

#These are the workflows that define what CircleCI actually does.
workflows:
  version: 2.1
  terraform:
    jobs:
      - terraform-plan-only:
          filters:
            branches:
              ignore: master
      - terraform-apply:
          filters:
            branches:
              only: master
